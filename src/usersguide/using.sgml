<!-- 
$Id: using.sgml,v 1.10 2010/09/22 21:13:53 mjk Exp $

@Copyright@
@Copyright@

$Log: using.sgml,v $
Revision 1.10  2010/09/22 21:13:53  mjk
- viz roll doc fix
- added DESCRIPTION for git (feel free to change these oneliners)
- added OWNER for git (do not change these)
see git.rocksclusters.org

Revision 1.9  2009/06/22 18:44:32  mjk
checkpoint

Revision 1.8  2009/06/19 23:39:33  mjk
*** empty log message ***

Revision 1.7  2009/06/11 23:34:02  mjk
- 32/64 bit chromium
- cleaning up the usersguide

Revision 1.6  2008/07/21 21:23:28  mjk
docs good

Revision 1.5  2006/09/21 03:21:02  mjk
cleanup manual

-->

<chapter>

<title>Using</title>

<section>
<title>Attributes</title>

<section>
<title>Resolution</title>

<para>
After the layout is configured and the <computeroutput>rocks sync tile</computeroutput> command is run the resolution of each tile display defaults to the preferred probed value from the nVidia driver.  
Probing the display requires a DVI connection and may fail on a VGA connect display.  
If the probed value is not correct you can modify the resolution using the <computeroutput>viz_tile_resolution</computeroutput> attribute.
For example to set the resolution of all the tile to 1920x1200 use the command <computeroutput>rocks set appliance attr tile viz_tile_resolution 1920x1200</computeroutput>, followup by a <computeroutput>rocks sync tile</computeroutput> command.
</para>

</section>

<section>
<title>Bezels Height and Width</title>

<para>
The Viz Roll supports the hiding of pixels behind LCD mullions (bezels).
Without bezel hiding all images rendered on the wall will display all pixels, 
This effect can be distracting for movies and other moving images, but is
beneficial for static images and text.
Bezel hiding is performed at the visualization middle-ware layer.
Because this is controlled at the middle-ware layer Chromium and SAGE behave slightly differently, with Chromium allowing the enabling and disabling of bezel hiding, and SAGE only supporting bezel hiding.
Despite these differences the following common set of attributes are used to set the bezel height and width.
</para>

<variablelist>
	<varlistentry>
     	<term>viz_tile_left_bezel</term>
		<listitem>
			<para>The size (in pixels) of the left-hand side LCD bezel.</para>
		</listitem>
     </varlistentry>
	<varlistentry>
     	<term>viz_tile_right_bezel</term>
		<listitem>
			<para>The size (in pixels) of the right-hand side LCD bezel.</para>
		</listitem>
	</varlistentry>
	<varlistentry>
     	<term>viz_tile_top_bezel</term>
		<listitem>
			<para>The size (in pixels) of the top LCD bezel.</para>
		</listitem>
	</varlistentry>
	<varlistentry>
     	<term>viz_tile_bottom_bezel</term>
		<listitem>
			<para>The size (in pixels) of the bottom LCD bezel.</para>
		</listitem>
	</varlistentry>
</variablelist>

<para>
The Viz Roll default for the the left and right side bezels is 100 pixels, and the default for the top and bottom bezels is 80 pixel.  These defaults are a reasonable starting point, but fine tuning will be required for your specific monitors.  Since the units of the bezels measurements are in pixels, of you change the resolution of the displays you will need to update the bezels settings as well.
</para>

<para>
You can use the <computeroutput>rocks set appliance attr</computeroutput> command to set the bezel attributes.  For example, to change the left side bezel to 200 pixels use the command <computeroutput>rocks set appliance attr tile viz_tile_left_bezel 200</computeroutput>.  If you have non-uniform displays you can also set the bezel sizes on a host basis, although not all middle-ware understands non-uniform tiled display walls.  For example, to change the right side bezel of tile-0-0:0.0 to 0 pixels use the command <computeroutput>rocks set host attr tile-0-0:0.0 viz_tile_right_bezel 0</computeroutput>.
</para>

</section>

<section>
<title>Video Driver</title>

<para>
The Viz Roll includes the latest (at time of release) production nVidia driver and the latest (at time of release) beta-version of the CUDA-enabled driver.  The CUDA driver is a superset of the standard driver and simply adds CUDA support to the existing OpenGL rendering support.
Standard nVidia drivers are released as <computeroutput>.run</computeroutput> files and the Viz Roll installs these onto the tile nodes runs the driver file on first boot to build and install the driver.
The following attributes control the selection of the driver:
</para>

<variablelist>
	<varlistentry>
      	<term>viz_nvidia_driver</term>
		<listitem>
			<para>
Full pathname to the <computeroutput>.run</computeroutput> driver file.
The Viz Roll installs the production driver at <computeroutput>/opt/viz/drivers/nvidia.run</computeroutput>, and the beta-CUDA driver at <computeroutput>/opt/viz/drivers/nvidia.run</computeroutput>.
			</para>
		</listitem>
	</varlistentry>
	<varlistentry>
      	<term>viz_nvidia_driver_options</term>
		<listitem>
			<para>
Command line flags used when executing the <computeroutput>.run</computeroutput> driver file.
The defaults are <computeroutput>--no-network -s</computeroutput>.
These setting work for both drivers included with the Viz Roll and should not
but modified.
			</para>
		</listitem>
	</varlistentry>
</variablelist>

<para>
To change to the CUDA driver for all tile use the command <computeroutput>rocks set appliance attr viz_nvidia_driver /opt/viz/drivers/cuda.run</computeroutput> and re-install the all the tile machines.  You can also issue this command before integrating any machine to avoid a second installation.
</para>

</section>

</section>

<section>
<title>Chromium</title>

<para>
Chromium is used to display the OpenGL frame of applications on the wall.  Applications must be dynamically linked to the libGL.so library and can be either 64-bit or 32-bit binaries.  Although the Viz Roll does include a 32-bit version of Chromium other application libraries may be missing. 
Some newer applications may contain code written to a later OpenGL 
specification than is supported by Chromium, however, most application work
without any source code changes.  
</para>
  
<section>
<title>Enabling and Disabling</title>

<para>
Enabling and disabling Chromium is done on per use basis and is not a global setting for all users.  In the default disabled state all OpenGL applications started on the frontend of the cluster will display normally in the frotend's X11 display.  If Chromium is enable the application will draw the non-OpenGL components (and window frame) on the frontend display and the OpenGL frame will be rendered across all the tiles in the wall.  Chromium is enabled and disabled using the following commands:
</para>

<para>
<computeroutput>rocks enable chromium</computeroutput>
</para>

<para>
<computeroutput>rocks disable chromium</computeroutput>
</para>
</section>


<section>
<title>Controlling Bezels</title>

<para> 
The default for Chromium is to not hide the bezels. 
The <computeroutput>rocks enable chromium hidebezels</computeroutput> and
<computeroutput>rocks disable chromium hidebezels</computeroutput> commands can be used to control this behavior.
</para>

</section>

<section>
<title>Application Notes</title>

<section><title>Google Earth</title>
<para>
Google Earth is a 32-bit application and may require extra 32-bit libraries installed on the frontend of the cluster (not the tile nodes).  Recent version of Google Earth work well under Chromium with the "atmosphere" effects turned off.  If the compas does not appear resize the application window on the frontend to set the correct aspect ratio to allow the drawing of the compas.
</para>
</section>

</section>

<section>
<title>SAGE</title>

<para>
A CGLX Roll is available to simplify the installation of CGLX on a Rocks Viz Wall.  This Roll can be installed during initial cluster build, or later after the cluster is deployed.  In both cases adjustments to the multi-case routing may be required.
</para>

</section>

<section>
<title>SAGE</title>

<para>
SAGE requires every user to have a complete personal copy of the SAGE binaries and libraries, and does not allow the sharing of the application in a common directory.  Where a user first starts SAGE a local copy of the SAGE distribution is made in ~/.sage.  All configuration files refered to in the EVL SAGE documentation are in this user specific ~/.sage directory.
</para> 


<section>
<title>Starting and Stopping</title>

<para>
SAGE can be started and stopped using the following command.  However the SAGE UI shutdown button is the preferred way to exit SAGE.
</para>

<para>
<computeroutput>rocks start sage</computeroutput>
Starting SAGE will create the ~/.sage directory if one does not exists and will generate all the SAGE configuration files based on the tile layout stored in the Rocks database.
</para>

<para>
<computeroutput>rocks stop sage</computeroutput>
Stopping SAGE can be a slow process.  
The Viz Roll changes the normal SAGE shutdown process to track down
all orphaned SAGE processes on the cluster.  
While this is not fool-proof it does improve issues of orphaned SAGE 
applications preventing SAGE from starting.
</para>

</section>

</section>
</section>


</chapter>
