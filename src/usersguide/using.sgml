<!-- 
$Id: using.sgml,v 1.8 2009/06/19 23:39:33 mjk Exp $

@Copyright@
@Copyright@

$Log: using.sgml,v $
Revision 1.8  2009/06/19 23:39:33  mjk
*** empty log message ***

Revision 1.7  2009/06/11 23:34:02  mjk
- 32/64 bit chromium
- cleaning up the usersguide

Revision 1.6  2008/07/21 21:23:28  mjk
docs good

Revision 1.5  2006/09/21 03:21:02  mjk
cleanup manual

-->

<chapter>

<title>Using</title>

<section>
<title>ConfigSetting LCD Bezels Height and Width</title>


<section>
<title>Chromium</title>

<para>
Chromium is used to display the OpenGL frame of applications on the wall.  Applications must be dynamically linked to the libGL.so library and can be either 64-bit or 32-bit binaries.  Although the Viz Roll does include a 32-bit version of Chromium other application libraries may be missing. 
Some newer applications may contain code written to a later OpenGL 
specification than is supported by Chromium, however, most application work
without any source code changes.  
</para>
  
<section>
<title>Enabling and Disabling</title>

<para>
Enabling and disabling Chromium is done on per use basis and is not a global setting for all users.  In the default disabled state all OpenGL applications started on the frontend of the cluster will display normally in the frotend's X11 display.  If Chromium is enable the application will draw the non-OpenGL components (and window frame) on the frontend display and the OpenGL frame will be rendered across all the tiles in the wall.  Chromium is enabled and disabled using the following commands:
</para>

<para>
<computeroutput>rocks enable chromium</computeroutput>
</para>

<para>
<computeroutput>rocks disable chromium</computeroutput>
</para>
</section>


<section>
<title>Controlling Bezels</title>

<para> 
The Viz Roll supports control over hiding of pixels behind LCD mullions 
(bezels) while using Chromium.  The default is to not hide the bezels. 
In this mode all images rendered on the wall will display all pixels. 
This effect can be distracting for movies and other moving images.   
The <computeroutput>rocks enable chromium hidebezels</computeroutput> and
<computeroutput>rocks disable chromium hidebezels</computeroutput> commands can be used to control this behavior.
</para>

</section>

<section>
<title>Application Notes</title>

<section><title>Google Earth</title>
<para>
Google Earth is a 32-bit application and may require extra 32-bit libraries installed on the frontend of the cluster (not the tile nodes).  Recent version of Google Earth work well under Chromium with the "atmosphere" effects turned off.  If the compas does not appear resize the application window on the frontend to set the correct aspect ratio to allow the drawing of the compas.
</para>
</section>

</section>

<section>
<title>SAGE</title>

<para>
SAGE requires every user to have a complete personal copy of the SAGE binaries and libraries, and does not allow the sharing of the application in a common directory.  Where a user first starts SAGE a local copy of the SAGE distribution is made in ~/.sage.  All configuration files refered to in the EVL SAGE documentation are in this user specific ~/.sage directory.
</para> 


<section>
<title>Starting and Stopping</title>

<para>
SAGE can be started and stopped using the following command.  However the SAGE UI shutdown button is the preferred way to exit SAGE.
</para>

<para>
<computeroutput>rocks start sage</computeroutput>
Starting SAGE will create the ~/.sage directory if one does not exists and will generate all the SAGE configuration files based on the tile layout stored in the Rocks database.
</para>

<para>
<computeroutput>rocks stop sage</computeroutput>
Stopping SAGE can be a slow process.  The Viz Roll changes the normal SAGE shutdown process to track down all orphaned SAGE processes on the cluster.  While the is not fool-proof it does improve issues of orphaned SAGE applications prevented SAGE from starting.
</para>

</section>

</section>
</section>
</section>


</chapter>
